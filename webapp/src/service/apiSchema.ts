/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/organizations/{organizationId}/users/{userId}/set-role": {
    put: operations["setUserRole"];
  };
  "/api/organizations/{id}/leave": {
    put: operations["leaveOrganization"];
  };
  "/api/organizations/{id}/invite": {
    put: operations["inviteUser"];
  };
  "/api/organizations/{id}": {
    get: operations["get"];
    put: operations["update"];
    delete: operations["delete"];
  };
  "/api/repository/{repositoryId}/keys": {
    put: operations["edit"];
    post: operations["create_2"];
  };
  "/api/repository/keys": {
    delete: operations["delete_4"];
  };
  "/api/repository/translations": {
    put: operations["setTranslations_1"];
    post: operations["createOrUpdateTranslations_1"];
  };
  "/api/organizations": {
    get: operations["getAll"];
    post: operations["create"];
  };
  "/api/address-part/generate-repository": {
    post: operations["generateRepositoryAddressPart"];
  };
  "/api/address-part/generate-organization": {
    post: operations["generateOrganizationAddressPart"];
  };
  "/api/user": {
    get: operations["getInfo"];
    post: operations["updateUser"];
  };
  "/api/repository/{repositoryId}/keys/edit": {
    post: operations["editDeprecated"];
  };
  "/api/repository/{repositoryId}/keys/create": {
    post: operations["create_1"];
  };
  "/api/repository/{repositoryId}/import": {
    post: operations["doImport"];
  };
  "/api/repository/languages/edit": {
    post: operations["editLanguage_1"];
  };
  "/api/repository/{repositoryId}/languages": {
    get: operations["getAll_1"];
    post: operations["createLanguage"];
  };
  "/api/repository/{repositoryId}/screenshots/get": {
    post: operations["getKeyScreenshots_1"];
  };
  "/api/repository/{repositoryId}/screenshots": {
    post: operations["uploadScreenshot_1"];
  };
  "/api/repositories": {
    get: operations["getAll_3"];
    post: operations["createRepository"];
  };
  "/api/repositories/invite": {
    post: operations["inviteUser_1"];
  };
  "/api/repositories/edit": {
    post: operations["editRepository"];
  };
  "/api/public/validate_email": {
    post: operations["validateEmail"];
  };
  "/api/public/sign_up": {
    post: operations["signUp"];
  };
  "/api/public/reset_password_set": {
    post: operations["resetPasswordSet"];
  };
  "/api/public/reset_password_request": {
    post: operations["resetPasswordRequest"];
  };
  "/api/public/generatetoken": {
    post: operations["authenticateUser"];
  };
  "/api/permission/edit": {
    post: operations["editPermission"];
  };
  "/api/apiKeys": {
    get: operations["allByUser"];
    post: operations["create_5"];
  };
  "/api/apiKeys/edit": {
    post: operations["edit_2"];
  };
  "/api/organizations/{organizationId}/invitations": {
    get: operations["getInvitations"];
  };
  "/api/organizations/{id}/users": {
    get: operations["getAllUsers"];
  };
  "/api/organizations/{id}/repositories": {
    get: operations["getAllRepositories"];
  };
  "/api/organizations/{addressPart}/repositories": {
    get: operations["getAllRepositories_1"];
  };
  "/api/organizations/{addressPart}": {
    get: operations["get_1"];
  };
  "/api/address-part/validate-repository/{addressPart}": {
    get: operations["validateRepositoryAddressPart"];
  };
  "/api/address-part/validate-organization/{addressPart}": {
    get: operations["validateOrganizationAddressPart"];
  };
  "/api/repository/keys/{id}": {
    get: operations["getDeprecated_1"];
    delete: operations["delete_2"];
  };
  "/api/repository/{repositoryId}/export/jsonZip": {
    get: operations["doExportJsonZip"];
  };
  "/api/repository/translations/{languages}": {
    get: operations["getTranslations_1"];
  };
  "/api/repository/{repositoryId}/translations/view": {
    get: operations["getViewData"];
  };
  "/api/repository/languages/{id}": {
    get: operations["get_3"];
    delete: operations["deleteLanguage_1"];
  };
  "/api/repositories/{id}": {
    get: operations["getRepository"];
    delete: operations["deleteRepository"];
  };
  "/api/public/verify_email/{userId}/{code}": {
    get: operations["verifyEmail"];
  };
  "/api/public/reset_password_validate/{email}/{code}": {
    get: operations["resetPasswordValidate"];
  };
  "/api/public/configuration": {
    get: operations["getPublicConfiguration"];
  };
  "/api/public/authorize_oauth/{serviceType}/{code}": {
    get: operations["authenticateUser_1"];
  };
  "/api/permission/list/{repositoryId}": {
    get: operations["getRepositoryPermissions"];
  };
  "/api/invitation/list/{repositoryId}": {
    get: operations["getRepositoryInvitations"];
  };
  "/api/invitation/accept/{code}": {
    get: operations["acceptInvitation"];
  };
  "/api/apiKeys/scopes": {
    get: operations["getApiKeyScopes"];
  };
  "/api/apiKeys/repository/{repositoryId}": {
    get: operations["allByRepository"];
  };
  "/api/apiKeys/availableScopes": {
    get: operations["getScopes"];
  };
  "/api/organizations/{organizationId}/users/{userId}": {
    delete: operations["removeUser"];
  };
  "/api/repository/screenshots/{ids}": {
    delete: operations["deleteScreenshots"];
  };
  "/api/permission/{permissionId}": {
    delete: operations["deletePermission"];
  };
  "/api/invitation/{invitationId}": {
    delete: operations["deleteInvitation"];
  };
  "/api/apiKeys/{key}": {
    delete: operations["delete_5"];
  };
}

export interface components {
  schemas: {
    SetOrganizationRoleDto: {
      roleType: "MEMBER" | "OWNER";
    };
    OrganizationInviteUserDto: {
      roleType: "MEMBER" | "OWNER";
    };
    Links: { [key: string]: components["schemas"]["Link"] };
    OrganizationInvitationModel: {
      id: number;
      code: string;
      type: "MEMBER" | "OWNER";
      organization: components["schemas"]["OrganizationModel"];
      createdAt: string;
      _links?: components["schemas"]["Links"];
    };
    OrganizationModel: {
      id: number;
      name: string;
      addressPart: string;
      description?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      _links?: components["schemas"]["Links"];
    };
    OrganizationDto: {
      name: string;
      description?: string;
      addressPart?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    EditKeyDTO: {
      currentName: string;
      newName: string;
    };
    SetTranslationsDTO: {
      key: string;
      translations?: { [key: string]: string };
    };
    GenerateAddressPathDto: {
      oldAddressPart?: string;
      name: string;
    };
    UserUpdateRequestDTO: {
      name: string;
      email: string;
      password?: string;
    };
    DeprecatedEditKeyDTO: {
      oldFullPathString: string;
      newFullPathString: string;
    };
    ImportDto: {
      languageAbbreviation: string;
      data: { [key: string]: string };
    };
    StreamingResponseBody: { [key: string]: any };
    LanguageDTO: {
      id?: number;
      name: string;
      abbreviation: string;
    };
    GetScreenshotsByKeyDTO: {
      key: string;
    };
    ScreenshotDTO: {
      id: number;
      filename: string;
      createdAt: string;
    };
    CreateRepositoryDTO: {
      name: string;
      languages: components["schemas"]["LanguageDTO"][];
      addressPart?: string;
      /** If not provided, repository will be created as users */
      organizationId?: number;
    };
    RepositoryDTO: {
      id?: number;
      name?: string;
      permissionType?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    RepositoryInviteUserDto: {
      repositoryId: number;
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    EditRepositoryDTO: {
      repositoryId: number;
      name: string;
      addressPart?: string;
    };
    TextNode: { [key: string]: any };
    SignUpDto: {
      name: string;
      email: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email?: string;
    };
    LoginRequest: {
      username?: string;
      password?: string;
    };
    PermissionEditDto: {
      permissionId?: number;
      type?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    CreateApiKeyDTO: {
      repositoryId: number;
      scopes?: string[];
    };
    ApiKeyDTO: {
      id?: number;
      "Resulting user's api key"?: string;
      userName?: string;
      repositoryId?: number;
      repositoryName?: string;
      scopes?: string[];
    };
    EditApiKeyDTO: {
      id: number;
      scopes: string[];
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components["schemas"]["OrganizationInvitationModel"][];
      };
      _links?: components["schemas"]["Links"];
    };
    Pageable: {
      page?: number;
      size?: number;
      sort?: string[];
    };
    PageMetadata: {
      size?: number;
      totalElements?: number;
      totalPages?: number;
      number?: number;
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components["schemas"]["UserAccountWithOrganizationRoleModel"][];
      };
      _links?: components["schemas"]["Links"];
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountWithOrganizationRoleModel: {
      id: number;
      name: string;
      username: string;
      organizationRoleType: "MEMBER" | "OWNER";
      _links?: components["schemas"]["Links"];
    };
    PagedModelRepositoryModel: {
      _embedded?: {
        repositories?: components["schemas"]["RepositoryModel"][];
      };
      _links?: components["schemas"]["Links"];
      page?: components["schemas"]["PageMetadata"];
    };
    RepositoryModel: {
      id: number;
      name: string;
      description?: string;
      addressPart: string;
      userOwner?: components["schemas"]["UserAccountModel"];
      organizationOwner?: components["schemas"]["OrganizationModel"];
      _links?: components["schemas"]["Links"];
    };
    UserAccountModel: {
      id: number;
      username: string;
      name: string;
      _links?: components["schemas"]["Links"];
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
    };
    OrganizationWithCurrentUserRoleModel: {
      id: number;
      name: string;
      addressPart: string;
      description?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      currentUserRole?: "MEMBER" | "OWNER";
      _links?: components["schemas"]["Links"];
    };
    PagedModelOrganizationWithCurrentUserRoleModel: {
      _embedded?: {
        organizations?: components["schemas"]["OrganizationWithCurrentUserRoleModel"][];
      };
      _links?: components["schemas"]["Links"];
      page?: components["schemas"]["PageMetadata"];
    };
    UserResponseDTO: {
      id?: number;
      name?: string;
      username?: string;
    };
    DeprecatedKeyDto: {
      /** This means name of key. Will be renamed in v2 */
      fullPathString: string;
    };
    KeyWithTranslationsResponseDto: {
      id?: number;
      name?: string;
      translations: { [key: string]: string };
    };
    PaginationMeta: {
      offset?: number;
      allCount?: number;
    };
    ResponseParams: {
      search?: string;
      languages?: string[];
    };
    ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams: {
      paginationMeta?: components["schemas"]["PaginationMeta"];
      params?: components["schemas"]["ResponseParams"];
      data?: components["schemas"]["KeyWithTranslationsResponseDto"][];
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    AuthMethodsDTO: {
      github: components["schemas"]["GithubPublicConfigDTO"];
    };
    GithubPublicConfigDTO: {
      clientId?: string;
      isEnabled: boolean;
    };
    PublicConfigurationDTO: {
      isAuthentication: boolean;
      authMethods?: components["schemas"]["AuthMethodsDTO"];
      isPasswordResettable: boolean;
      isAllowRegistrations: boolean;
      screenshotsUrl: string;
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateRepositories: boolean;
      userCanCreateOrganizations: boolean;
    };
    PermissionDTO: {
      id?: number;
      type?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      username?: string;
      userId?: number;
      userFullName?: string;
    };
    InvitationDTO: {
      id?: number;
      code?: string;
      type?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    Link: {
      href?: string;
      hreflang?: string;
      title?: string;
      type?: string;
      deprecation?: string;
      profile?: string;
      name?: string;
      templated?: boolean;
    };
  };
}

export interface operations {
  setUserRole: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetOrganizationRoleDto"];
      };
    };
  };
  leaveOrganization: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  inviteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationInvitationModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInviteUserDto"];
      };
    };
  };
  get: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  edit: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDTO"];
      };
    };
  };
  create_2: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsDTO"];
      };
    };
  };
  delete_4: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  setTranslations_1: {
    parameters: {};
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsDTO"];
      };
    };
  };
  createOrUpdateTranslations_1: {
    parameters: {};
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsDTO"];
      };
    };
  };
  getAll: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
        params: components["schemas"]["OrganizationRequestParamsDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelOrganizationWithCurrentUserRoleModel"];
        };
      };
    };
  };
  create: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  generateRepositoryAddressPart: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateAddressPathDto"];
      };
    };
  };
  generateOrganizationAddressPart: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateAddressPathDto"];
      };
    };
  };
  getInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserResponseDTO"];
        };
      };
    };
  };
  updateUser: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequestDTO"];
      };
    };
  };
  editDeprecated: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeprecatedEditKeyDTO"];
      };
    };
  };
  create_1: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsDTO"];
      };
    };
  };
  doImport: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportDto"];
      };
    };
  };
  editLanguage_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDTO"];
      };
    };
  };
  getAll_1: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageDTO"][];
        };
      };
    };
  };
  createLanguage: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDTO"];
      };
    };
  };
  getKeyScreenshots_1: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ScreenshotDTO"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetScreenshotsByKeyDTO"];
      };
    };
  };
  uploadScreenshot_1: {
    parameters: {
      path: {
        repositoryId: number;
      };
      query: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ScreenshotDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          screenshot: string;
        };
      };
    };
  };
  getAll_3: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RepositoryDTO"][];
        };
      };
    };
  };
  createRepository: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RepositoryDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRepositoryDTO"];
      };
    };
  };
  inviteUser_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepositoryInviteUserDto"];
      };
    };
  };
  editRepository: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RepositoryDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditRepositoryDTO"];
      };
    };
  };
  validateEmail: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextNode"];
      };
    };
  };
  signUp: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: any };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
  };
  resetPasswordSet: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPassword"];
      };
    };
  };
  resetPasswordRequest: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
  };
  authenticateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: any };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
  };
  editPermission: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionEditDto"];
      };
    };
  };
  allByUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"][];
        };
      };
    };
  };
  create_5: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyDTO"];
      };
    };
  };
  edit_2: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditApiKeyDTO"];
      };
    };
  };
  getInvitations: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelOrganizationInvitationModel"];
        };
      };
    };
  };
  getAllUsers: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components["schemas"]["Pageable"];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelUserAccountWithOrganizationRoleModel"];
        };
      };
    };
  };
  getAllRepositories: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelRepositoryModel"];
        };
      };
    };
  };
  getAllRepositories_1: {
    parameters: {
      path: {
        addressPart: string;
      };
      query: {
        pageable: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelRepositoryModel"];
        };
      };
    };
  };
  get_1: {
    parameters: {
      path: {
        addressPart: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
    };
  };
  validateRepositoryAddressPart: {
    parameters: {
      path: {
        addressPart: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  validateOrganizationAddressPart: {
    parameters: {
      path: {
        addressPart: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
    };
  };
  getDeprecated_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["DeprecatedKeyDto"];
        };
      };
    };
  };
  delete_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  doExportJsonZip: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
    };
  };
  getTranslations_1: {
    parameters: {
      path: {
        languages: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: { [key: string]: any } };
        };
      };
    };
  };
  getViewData: {
    parameters: {
      path: {
        repositoryId: number;
      };
      query: {
        languages?: string[];
        limit?: number;
        offset?: number;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams"];
        };
      };
    };
  };
  get_3: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageDTO"];
        };
      };
    };
  };
  deleteLanguage_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getRepository: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RepositoryDTO"];
        };
      };
    };
  };
  deleteRepository: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  verifyEmail: {
    parameters: {
      path: {
        userId: number;
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
    };
  };
  resetPasswordValidate: {
    parameters: {
      path: {
        code: string;
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getPublicConfiguration: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PublicConfigurationDTO"];
        };
      };
    };
  };
  authenticateUser_1: {
    parameters: {
      path: {
        serviceType: string;
        code: string;
      };
      query: {
        invitationCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
    };
  };
  getRepositoryPermissions: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PermissionDTO"][];
        };
      };
    };
  };
  getRepositoryInvitations: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["InvitationDTO"][];
        };
      };
    };
  };
  acceptInvitation: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getApiKeyScopes: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
    };
  };
  allByRepository: {
    parameters: {
      path: {
        repositoryId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"][];
        };
      };
    };
  };
  getScopes: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: string[] };
        };
      };
    };
  };
  removeUser: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deleteScreenshots: {
    parameters: {
      path: {
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deletePermission: {
    parameters: {
      path: {
        permissionId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deleteInvitation: {
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  delete_5: {
    parameters: {
      path: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
}
